services:
  db:
    image: mysql:8.0
    platform: linux/amd64
    container_name: eventa_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: eventa_development
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      TZ: Asia/Tokyo
    volumes:
      - db_data:/var/lib/mysql
      - ./mysql_config:/etc/mysql/conf.d
      - ./db/sql:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpass"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:7-alpine
    ports: 
      # 開発時のRedis-CLIなどからのアクセス用
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: eventa_api
    restart: unless-stopped
    environment:
      RAILS_ENV: development
      DB_HOST: db
      DB_USERNAME: root
      DB_PASSWORD: rootpass
      TZ: Asia/Tokyo
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY:-master_key_placeholder}
      SECRET_KEY_BASE: a1b2c3d4e5f6g7h8
    volumes:
      - ./api:/app
      - api_bundle:/usr/local/bundle
      - api_node_modules:/app/node_modules
      - ./api/tmp/mysql.sock:/tmp/mysql.sock
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    tty: true
    stdin_open: true
    # mysql-clientパッケージのインストールを追加
    command: >
      bash -c "
        apt-get update &&
        apt-get install -y default-mysql-client &&
        bundle check || bundle install &&
        rm -f tmp/pids/server.pid &&
        export SECRET_KEY_BASE=a1b2c3d4e5f6g7h8 &&
        bin/rails s -p 3000 -b '0.0.0.0'
      "

  # フロントエンド開発サーバー
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eventa_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      TZ: Asia/Tokyo
      API_BASE_URL: http://api:3000
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3001:3000"
    depends_on:
      - api
    tty: true
    stdin_open: true
    command: npm run dev

  # 開発サポートサービス
  adminer:
    image: adminer:latest
    container_name: eventa_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      db:
        condition: service_healthy

  # 本番環境に近い構成でテストしたい場合のみworkerを分離起動
  worker:
    profiles: ["production-like"]
    restart: unless-stopped  # Sidekiqが落ちても自動的に再起動
    build: 
      context: .
      dockerfile: Dockerfile.api
      target: runtime  # runtimeステージのみ使用して軽量化
    command: bundle exec sidekiq
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file: .env.example
    volumes:
      - ./api:/app
      - bundle_cache:/usr/local/bundle

volumes:
  db_data:
  api_bundle:
  api_node_modules:
  frontend_node_modules:
  bundle_cache:
  yarn_cache:
