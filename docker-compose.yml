services:
  db:
    image: mysql:8.0
    env_file: .env.example
    ports: 
      # 開発時の直接アクセス用のみポート公開（CIでは不要）
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "--silent"]
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    ports: 
      # 開発時のRedis-CLIなどからのアクセス用
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  api:
    build: 
      context: .
      dockerfile: Dockerfile.api
      target: builder  # 開発環境では必要なツールが入っているbuilderステージを使用
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports: ["3001:3000"]
    env_file: .env.example
    environment:
      - RAILS_ENV=development
    # 開発環境ではまずbundle installを実行してからForeman起動
    command: >
      bash -c "bundle config set --local without '' &&
              bundle config set --local deployment 'false' &&
              bundle install --jobs 4 &&
              bundle exec foreman start -f Procfile.dev"
    volumes:
      - ./api:/app
      - bundle_cache:/usr/local/bundle
      - yarn_cache:/home/vscode/.cache/yarn
    tty: true  # TTYを有効化（対話コマンドのサポート）
    stdin_open: true  # STDINを有効化

  # フロントエンド開発サーバー
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports: ["3000:3000"]
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api/v1
    command: npm run dev
    depends_on:
      - api
    tty: true  # TTYを有効化（対話コマンドのサポート）
    stdin_open: true  # STDINを有効化

  # 本番環境に近い構成でテストしたい場合のみworkerを分離起動
  worker:
    profiles: ["production-like"]
    restart: unless-stopped  # Sidekiqが落ちても自動的に再起動
    build: 
      context: .
      dockerfile: Dockerfile.api
      target: runtime  # runtimeステージのみ使用して軽量化
    command: bundle exec sidekiq
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file: .env.example
    volumes:
      - ./api:/app
      - bundle_cache:/usr/local/bundle

volumes:
  db_data:
  bundle_cache:
  yarn_cache:
  frontend_node_modules:
