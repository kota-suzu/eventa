name: 認証システムテスト

on:
  push:
    branches: [main, develop]
    paths:
      - 'app/controllers/api/v1/auths_controller.rb'
      - 'app/services/json_web_token.rb'
      - 'app/models/user.rb'
      - 'spec/requests/api/v1/**/*'
      - 'spec/services/**/*'
      - 'spec/models/user_spec.rb'
      - 'spec/system/**/*'
  pull_request:
    branches: [main, develop]
    paths:
      - 'app/controllers/api/v1/auths_controller.rb'
      - 'app/services/json_web_token.rb'
      - 'app/models/user.rb'
      - 'spec/requests/api/v1/**/*'
      - 'spec/services/**/*'
      - 'spec/models/user_spec.rb'
      - 'spec/system/**/*'

jobs:
  auth-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: eventa_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      RAILS_ENV: test
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: rootpass
      DB_NAME: eventa_test
      JWT_SECRET_KEY: test_jwt_secret_for_ci_pipeline
      JWT_EXPIRATION_HOURS: 24
      JWT_REFRESH_EXPIRATION_DAYS: 30
    
    steps:
      - name: ソースコードをチェックアウト
        uses: actions/checkout@v4
      
      # 1) Install Ruby (skip bundle)
      - name: Ruby をセットアップ (bundle なし)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: false
          working-directory: ./api

      # 2) プラットフォーム情報の追加
      - name: x86_64-linux プラットフォームを追加
        run: bundle lock --add-platform x86_64-linux
        working-directory: ./api

      # 3) キャッシュを使用したgemのインストール
      - name: Bundle インストール (キャッシュ)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
          working-directory: ./api
      
      # bundlerの設定
      - name: Bundler設定
        run: |
          gem update --system
          bundle config set --local without "production"
          bundle install --jobs 4 --retry 3
        working-directory: ./api
      
      - name: データベースをセットアップ
        run: |
          echo "📊 テストデータベースの準備を開始します..."
          
          # MySQLの状態確認
          echo "🔍 MySQLサービスの接続確認"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "SHOW DATABASES;"
          
          # データベースの再作成
          echo "🗑️ 既存データベースを削除（存在する場合）"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "DROP DATABASE IF EXISTS eventa_test;"
          
          echo "🆕 新規データベースを作成"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "CREATE DATABASE eventa_test CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
          
          # Rails環境での確認
          echo "🔄 Railsからデータベース接続を確認"
          bundle exec rails runner -e test 'begin; puts "🟢 DB接続成功: #{ActiveRecord::Base.connection.active?}"; rescue => e; puts "🔴 DB接続エラー: #{e.message}"; exit 1; end'
          
          # スキーマを明示的に適用（--verboseオプション追加）
          echo "🏗️ スキーマを適用（Ridgepole）"
          bundle exec ridgepole -c config/database.yml -E test --apply --verbose -f db/Schemafile
          
          # テーブル確認
          echo "📋 テーブル構造の確認"
          bundle exec rails runner -e test 'tables = ActiveRecord::Base.connection.tables.sort; puts "テーブル一覧 (#{tables.size}件): #{tables.join(", ")}"; puts "データベースアダプタ: #{ActiveRecord::Base.connection.adapter_name}"'
          
          # 重要テーブルの存在確認
          echo "🔍 重要テーブルの存在を確認"
          bundle exec rails runner -e test '
            critical_tables = %w[events users tickets ticket_types participants reservations] 
            existing_tables = ActiveRecord::Base.connection.tables
            missing_tables = critical_tables - existing_tables
            
            if missing_tables.empty?
              puts "✅ 重要テーブル (#{critical_tables.join(", ")}) は全て存在します"
            else
              puts "❌ 以下の重要テーブルが不足しています: #{missing_tables.join(", ")}"
              puts "  現在のテーブル: #{existing_tables.join(", ")}"
              exit 1
            end
          '
          
          # usersテーブルの構造確認
          echo "🔬 usersテーブルの構造確認"
          bundle exec rails runner -e test '
            begin
              columns = ActiveRecord::Base.connection.columns("users")
              puts "usersテーブルのカラム:"
              columns.each { |c| puts "  - #{c.name} (#{c.type})" }
            rescue => e
              puts "usersテーブル確認エラー: #{e.message}"
              exit 1
            end
          '
          
          echo "✅ データベース準備完了"
        working-directory: ./api
      
      # テスト環境の健全性確認
      - name: テスト環境の健全性確認
        run: |
          echo "🔍 Userモデルの検証"
          # Userモデルが正しく読み込めるか確認
          bundle exec rails runner -e test 'puts "Userモデル確認: #{User.column_names.include?("email") ? "OK" : "NG"}"'
          
          # Enumが正しく機能するか確認
          bundle exec rails runner -e test 'puts "User roleのenum確認: #{User.roles.keys}"'
          bundle exec rails runner -e test 'puts "User statusのenum確認: #{User.statuses.keys}"'
          
          # JWT関連の設定確認
          bundle exec rails runner -e test 'puts "JWT設定確認: Secret=#{ENV["JWT_SECRET_KEY"].present? ? "設定済み" : "未設定"}, 有効期間=#{ENV["JWT_EXPIRATION_HOURS"]}時間"'
          
          echo "✅ テスト環境健全性確認完了"
        working-directory: ./api
      
      - name: 認証関連のRSpecテストを実行
        run: |
          bundle exec rspec \
            spec/services/json_web_token_spec.rb \
            spec/models/user_spec.rb \
            spec/requests/api/v1/auths_controller_spec.rb \
            spec/requests/api/v1/auth_api_coverage_spec.rb \
            spec/security/auth_security_spec.rb \
            --format documentation
        working-directory: ./api
      
      - name: テストカバレッジを確認
        run: |
          COVERAGE=true bundle exec rspec \
            spec/services/json_web_token_spec.rb \
            spec/models/user_spec.rb \
            spec/requests/api/v1/auths_controller_spec.rb \
            spec/requests/api/v1/auth_api_coverage_spec.rb \
            spec/security/auth_security_spec.rb
        working-directory: ./api
      
      - name: カバレッジレポートをアップロード
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./api/coverage
      
      - name: カバレッジをコメントに追加
        uses: MishaKav/jest-coverage-comment@main
        with:
          title: 認証システムテストカバレッジ
          badge-title: カバレッジ
          coverage-path: ./api/coverage/lcov.info
          coverage-threshold: 80
      
      - name: テスト成功時の通知
        if: success()
        run: |
          echo "認証システムのテストが成功しました！"
        working-directory: ./api
      
      - name: テスト失敗時の通知
        if: failure()
        run: |
          echo "認証システムのテストが失敗しました。ログを確認してください。"
        working-directory: ./api