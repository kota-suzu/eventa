name: 認証システムテスト

on:
  push:
    branches: [main, develop]
    paths:
      - 'app/controllers/api/v1/auths_controller.rb'
      - 'app/services/json_web_token.rb'
      - 'app/models/user.rb'
      - 'spec/requests/api/v1/**/*'
      - 'spec/services/**/*'
      - 'spec/models/user_spec.rb'
      - 'spec/system/**/*'
  pull_request:
    branches: [main, develop]
    paths:
      - 'app/controllers/api/v1/auths_controller.rb'
      - 'app/services/json_web_token.rb'
      - 'app/models/user.rb'
      - 'spec/requests/api/v1/**/*'
      - 'spec/services/**/*'
      - 'spec/models/user_spec.rb'
      - 'spec/system/**/*'

jobs:
  auth-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: eventa_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      RAILS_ENV: test
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: rootpass
      DB_NAME: eventa_test
      JWT_SECRET_KEY: test_jwt_secret_for_ci_pipeline
      JWT_EXPIRATION_HOURS: 24
      JWT_REFRESH_EXPIRATION_DAYS: 30
      # Ridgepole用のデバッグ出力を有効化
      RIDGEPOLE_DEBUG: 1
    
    steps:
      - name: ソースコードをチェックアウト
        uses: actions/checkout@v4
      
      # 1) Install Ruby (skip bundle)
      - name: Ruby をセットアップ (bundle なし)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: false
          working-directory: ./api

      # 2) プラットフォーム情報の追加
      - name: x86_64-linux プラットフォームを追加
        run: bundle lock --add-platform x86_64-linux
        working-directory: ./api

      # 3) キャッシュを使用したgemのインストール
      - name: Bundle インストール (キャッシュ)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
          working-directory: ./api
      
      # bundlerの設定
      - name: Bundler設定
        run: |
          gem update --system
          bundle config set --local without "production"
          bundle install --jobs 4 --retry 3
        working-directory: ./api
      
      - name: データベースをセットアップ
        run: |
          bundle exec rails db:create RAILS_ENV=test
          bundle exec ridgepole -c config/database.yml -E test --apply -f db/Schemafile
        working-directory: ./api
      
      - name: 認証関連のRSpecテストを実行
        run: |
          bundle exec rspec \
            spec/services/json_web_token_spec.rb \
            spec/models/user_spec.rb \
            spec/requests/api/v1/auths_controller_spec.rb \
            spec/requests/api/v1/auth_api_coverage_spec.rb \
            spec/security/auth_security_spec.rb \
            --format documentation
        working-directory: ./api
      
      - name: テストカバレッジを確認
        run: |
          COVERAGE=true bundle exec rspec \
            spec/services/json_web_token_spec.rb \
            spec/models/user_spec.rb \
            spec/requests/api/v1/auths_controller_spec.rb \
            spec/requests/api/v1/auth_api_coverage_spec.rb \
            spec/security/auth_security_spec.rb
        working-directory: ./api
      
      - name: カバレッジレポートをアップロード
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./api/coverage
      
      - name: カバレッジをコメントに追加
        uses: MishaKav/jest-coverage-comment@main
        with:
          title: 認証システムテストカバレッジ
          badge-title: カバレッジ
          coverage-path: ./api/coverage/lcov.info
          coverage-threshold: 80
      
      - name: テスト成功時の通知
        if: success()
        run: |
          echo "認証システムのテストが成功しました！"
        working-directory: ./api
      
      - name: テスト失敗時の通知
        if: failure()
        run: |
          echo "認証システムのテストが失敗しました。ログを確認してください。"
        working-directory: ./api