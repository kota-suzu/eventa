# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

defaults:
  run:
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Install Ruby (skip bundle)
      - name: Set up Ruby (no bundle yet)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: false
          working-directory: ./api

      # 2) Inject platform into Gemfile.lock
      - name: Add x86_64-linux platform
        run: bundle lock --add-platform x86_64-linux
        working-directory: ./api

      # 3) Install gems with cache
      - name: Bundle install (cache)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
          working-directory: ./api

      # error_highlightのインストールステップを削除
      # - name: Install error_highlight
      #   run: gem install error_highlight -v '0.7.0'
      #   working-directory: ./api

      # 代わりにbundlerの設定を追加
      - name: Configure bundler
        run: |
          gem update --system
          bundle config set --local without "production"
          bundle install --jobs 4 --retry 3
        working-directory: ./api

      - name: RuboCop
        run: bundle exec standardrb
        working-directory: ./api

      - name: RubyCritic
        run: bundle exec rubycritic --no-browser --minimum-score 80 --format json
        working-directory: ./api

      - name: Flog Complexity Check
        run: |
          bundle exec flog -a app/**/*.rb | grep -v -E "#none|flog/method|flog total" | awk '{if ($1>20) {print; exit 1}}' || (echo "✅ 全てのメソッドが複雑度閾値内(20以下)です")
        working-directory: ./api

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: eventa_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      RAILS_ENV: test
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: rootpass
      DB_NAME: eventa_test
      REDIS_URL: redis://localhost:6379/1
    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby (no bundle yet)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: false
          working-directory: ./api

      - name: Add x86_64-linux platform
        run: bundle lock --add-platform x86_64-linux
        working-directory: ./api

      - name: Bundle install (cache)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
          working-directory: ./api

      # bundlerの設定を追加
      - name: Configure bundler for tests
        run: |
          gem update --system
          bundle config set --local without "production"
          bundle install --jobs 4 --retry 3
        working-directory: ./api

      # テストデータベースのセットアップを追加
      - name: テストデータベースを準備
        run: |
          echo "📊 テストデータベースの準備を開始します..."
          
          # MySQLの状態確認
          echo "🔍 MySQLサービスの接続確認"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "SHOW DATABASES;"
          
          # データベースの再作成
          echo "🗑️ 既存データベースを削除（存在する場合）"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "DROP DATABASE IF EXISTS eventa_test;"
          
          echo "🆕 新規データベースを作成"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "CREATE DATABASE eventa_test CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
          
          # Rails環境での確認
          echo "🔄 Railsからデータベース接続を確認"
          bundle exec rails runner -e test 'begin; puts "🟢 DB接続成功: #{ActiveRecord::Base.connection.active?}"; rescue => e; puts "🔴 DB接続エラー: #{e.message}"; exit 1; end'
          
          # スキーマを明示的に適用（--verboseオプション追加）
          echo "🏗️ スキーマを適用（Ridgepole）"
          bundle exec ridgepole -c config/database.yml -E test --apply --verbose -f db/Schemafile
          
          # テーブル確認
          echo "📋 テーブル構造の確認"
          bundle exec rails runner -e test 'tables = ActiveRecord::Base.connection.tables.sort; puts "テーブル一覧 (#{tables.size}件): #{tables.join(", ")}"; puts "データベースアダプタ: #{ActiveRecord::Base.connection.adapter_name}"'
          
          # 重要テーブルの存在確認
          echo "🔍 重要テーブルの存在を確認"
          bundle exec rails runner -e test '
            critical_tables = %w[events users tickets ticket_types participants reservations] 
            existing_tables = ActiveRecord::Base.connection.tables
            missing_tables = critical_tables - existing_tables
            
            if missing_tables.empty?
              puts "✅ 重要テーブル (#{critical_tables.join(", ")}) は全て存在します"
            else
              puts "❌ 以下の重要テーブルが不足しています: #{missing_tables.join(", ")}"
              puts "  現在のテーブル: #{existing_tables.join(", ")}"
              exit 1
            end
          '
          
          # usersテーブルの構造確認
          echo "🔬 usersテーブルの構造確認"
          bundle exec rails runner -e test '
            begin
              columns = ActiveRecord::Base.connection.columns("users")
              puts "usersテーブルのカラム:"
              columns.each { |c| puts "  - #{c.name} (#{c.type})" }
            rescue => e
              puts "usersテーブル確認エラー: #{e.message}"
              exit 1
            end
          '
          
          echo "✅ データベース準備完了"
        working-directory: ./api

      - name: RSpec with SimpleCov
        run: bundle exec rspec --format progress
        working-directory: ./api

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./api/coverage
          fail_ci_if_error: true

  race-condition-test:
    runs-on: ubuntu-latest
    needs: test
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: eventa_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      RAILS_ENV: test
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: rootpass
      DB_NAME: eventa_test
      PARALLEL_TEST_PROCESSORS: 4
    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby (no bundle yet)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: false
          working-directory: ./api

      - name: Add x86_64-linux platform
        run: bundle lock --add-platform x86_64-linux
        working-directory: ./api

      - name: Bundle install (cache)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
          working-directory: ./api

      # bundlerの設定を追加
      - name: Configure bundler for race tests
        run: |
          gem update --system
          bundle config set --local without "production"
          bundle install --jobs 4 --retry 3
        working-directory: ./api

      # テストデータベースのセットアップを追加
      - name: テストデータベースを準備
        run: |
          echo "📊 テストデータベースの準備を開始します..."
          
          # MySQLの状態確認
          echo "🔍 MySQLサービスの接続確認"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "SHOW DATABASES;"
          
          # データベースの再作成
          echo "🗑️ 既存データベースを削除（存在する場合）"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "DROP DATABASE IF EXISTS eventa_test;"
          
          echo "🆕 新規データベースを作成"
          mysql -h 127.0.0.1 -P 3306 -u root -prootpass -e "CREATE DATABASE eventa_test CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
          
          # Rails環境での確認
          echo "🔄 Railsからデータベース接続を確認"
          bundle exec rails runner -e test 'begin; puts "🟢 DB接続成功: #{ActiveRecord::Base.connection.active?}"; rescue => e; puts "🔴 DB接続エラー: #{e.message}"; exit 1; end'
          
          # スキーマを明示的に適用（--verboseオプション追加）
          echo "🏗️ スキーマを適用（Ridgepole）"
          bundle exec ridgepole -c config/database.yml -E test --apply --verbose -f db/Schemafile
          
          # テーブル確認
          echo "📋 テーブル構造の確認"
          bundle exec rails runner -e test 'tables = ActiveRecord::Base.connection.tables.sort; puts "テーブル一覧 (#{tables.size}件): #{tables.join(", ")}"; puts "データベースアダプタ: #{ActiveRecord::Base.connection.adapter_name}"'
          
          # 重要テーブルの存在確認
          echo "🔍 重要テーブルの存在を確認"
          bundle exec rails runner -e test '
            critical_tables = %w[events users tickets ticket_types participants reservations] 
            existing_tables = ActiveRecord::Base.connection.tables
            missing_tables = critical_tables - existing_tables
            
            if missing_tables.empty?
              puts "✅ 重要テーブル (#{critical_tables.join(", ")}) は全て存在します"
            else
              puts "❌ 以下の重要テーブルが不足しています: #{missing_tables.join(", ")}"
              puts "  現在のテーブル: #{existing_tables.join(", ")}"
              exit 1
            end
          '
          
          # usersテーブルの構造確認
          echo "🔬 usersテーブルの構造確認"
          bundle exec rails runner -e test '
            begin
              columns = ActiveRecord::Base.connection.columns("users")
              puts "usersテーブルのカラム:"
              columns.each { |c| puts "  - #{c.name} (#{c.type})" }
            rescue => e
              puts "usersテーブル確認エラー: #{e.message}"
              exit 1
            end
          '
          
          echo "✅ データベース準備完了"
        working-directory: ./api

      - name: Install parallel_tests
        run: gem install parallel_tests
        working-directory: ./api

      - name: Run Concurrent Tests
        run: |
          bundle exec rake parallel:setup
          bundle exec parallel_rspec spec/models/ticket_spec.rb:62 -- --tag concurrent
        working-directory: ./api
